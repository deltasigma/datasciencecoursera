lines(housedata$DateTime, housedata$Sub_metering_3,
type = "l",
col = "blue")
# Plot graph 3: Create legend
legend("topright",
pch = "_",
col = c("black","red","blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# Draw graph 4
plot(housedata$DateTime, housedata$Global_reactive_power,
type = "l",
ylab = "Global_reactive_power",
xlab = "datetime")
# Defining canvas for multiple graphs
par(mfrow = c(2,2))
par(mar = c(2,3,2,2))
# Draw graph 1
plot(housedata$DateTime, housedata$Global_active_power,
type = "l",
ylab = "Global Active Power",
xlab = "")
# Draw graph 2
plot(housedata$DateTime, housedata$Voltage,
type = "l",
ylab = "Voltage",
xlab = "datetime")
# Draw graph 3: Sub_metering_1
plot(housedata$DateTime, housedata$Sub_metering_1,
type = "l",
ylab = "Energy sub metering",
xlab = "")
# Plot graph 3: Sub_metering_2
lines(housedata$DateTime, housedata$Sub_metering_2,
type = "l",
col = "red")
# Plot graph 3: Sub_metering_3
lines(housedata$DateTime, housedata$Sub_metering_3,
type = "l",
col = "blue")
# Plot graph 3: Create legend
legend("topright",
pch = "_",
col = c("black","red","blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# Draw graph 4
plot(housedata$DateTime, housedata$Global_reactive_power,
type = "l",
ylab = "Global_reactive_power",
xlab = "datetime")
# Defining canvas for multiple graphs
par(mfrow = c(2,2))
par(mar = c(2,4,2,2))
# Draw graph 1
plot(housedata$DateTime, housedata$Global_active_power,
type = "l",
ylab = "Global Active Power",
xlab = "")
# Draw graph 2
plot(housedata$DateTime, housedata$Voltage,
type = "l",
ylab = "Voltage",
xlab = "datetime")
# Draw graph 3: Sub_metering_1
plot(housedata$DateTime, housedata$Sub_metering_1,
type = "l",
ylab = "Energy sub metering",
xlab = "")
# Plot graph 3: Sub_metering_2
lines(housedata$DateTime, housedata$Sub_metering_2,
type = "l",
col = "red")
# Plot graph 3: Sub_metering_3
lines(housedata$DateTime, housedata$Sub_metering_3,
type = "l",
col = "blue")
# Plot graph 3: Create legend
legend("topright",
pch = "_",
col = c("black","red","blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# Draw graph 4
plot(housedata$DateTime, housedata$Global_reactive_power,
type = "l",
ylab = "Global_reactive_power",
xlab = "datetime")
# Defining canvas for multiple graphs
par(mfrow = c(2,2))
par(mar = c(2,4,2,2))
# Draw graph 1
plot(housedata$DateTime, housedata$Global_active_power,
type = "l",
ylab = "Global Active Power",
xlab = "")
# Draw graph 2
plot(housedata$DateTime, housedata$Voltage,
type = "l",
ylab = "Voltage",
xlab = "datetime")
# Draw graph 3: Sub_metering_1
plot(housedata$DateTime, housedata$Sub_metering_1,
type = "l",
ylab = "Energy sub metering",
xlab = "")
# Plot graph 3: Sub_metering_2
lines(housedata$DateTime, housedata$Sub_metering_2,
type = "l",
col = "red")
# Plot graph 3: Sub_metering_3
lines(housedata$DateTime, housedata$Sub_metering_3,
type = "l",
col = "blue")
# Plot graph 3: Create legend
legend("topright",
pch = "_",
col = c("black","red","blue"),
bty = "n",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# Draw graph 4
plot(housedata$DateTime, housedata$Global_reactive_power,
type = "l",
ylab = "Global_reactive_power",
xlab = "datetime")
## Load necessary Library
library(lubridate)
## Function to get data from download or local filesystem
getdata <- function(filename = "VAZIO")  {
# Download data if its not present
if (!file.exists(filename)) {
# Dataset URL
dataURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
# Create temporary file for zip download
zipTemp <- tempfile()
# Save data on local filesystem
download.file(dataURL, zipTemp, method="curl")
# Open the zip file
data <- read.table(unz(zipTemp, "household_power_consumption.txt"),
sep = ";",
na.string = "?",
header = TRUE)
# Delete temp file
unlink(zipTemp)
} else {
# File found locally. Load it!
data <- read.table("household_power_consumption.txt",
sep = ";",
na.string = "?",
header = TRUE)
}
# Fix the date format
#dados$Date <- as.POSIXct(strptime(dados$Date, "%d/%m/%Y"))
data$DateTime <-dmy_hms(paste(data$Date, data$Time, sep=" "))
data$Date <-dmy(data$Date)
#data$Time <-hms(data$Time)
# Return the data
data[data$Date == ymd("2007-02-01") | data$Date == ymd("2007-02-02"), ]
#data
}
# Loading data
housedata <- getdata("household_power_consumption.txt")
# Create PNG file
png(file = "plot4.png", width = 480, height = 480)
# Defining canvas for multiple graphs
par(mfrow = c(2,2))
par(mar = c(2,4,2,2))
# Draw graph 1
plot(housedata$DateTime, housedata$Global_active_power,
type = "l",
ylab = "Global Active Power",
xlab = "")
# Draw graph 2
plot(housedata$DateTime, housedata$Voltage,
type = "l",
ylab = "Voltage",
xlab = "datetime")
# Draw graph 3: Sub_metering_1
plot(housedata$DateTime, housedata$Sub_metering_1,
type = "l",
ylab = "Energy sub metering",
xlab = "")
# Plot graph 3: Sub_metering_2
lines(housedata$DateTime, housedata$Sub_metering_2,
type = "l",
col = "red")
# Plot graph 3: Sub_metering_3
lines(housedata$DateTime, housedata$Sub_metering_3,
type = "l",
col = "blue")
# Plot graph 3: Create legend
legend("topright",
pch = "_",
col = c("black","red","blue"),
bty = "n",
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# Draw graph 4
plot(housedata$DateTime, housedata$Global_reactive_power,
type = "l",
ylab = "Global_reactive_power",
xlab = "datetime")
# Create PNG file
dev.off()
install.library('RMySQL')
library.install('RMySQL')
install.packages('RMySQL')
install.packages('RMySQL', type="source")
library('RMySQL')
db <- dbConnect(MySQL,user="genome",)
db <- dbConnect(MySQL,user="genome", host="genome-mysql.cse.ucsc.edu")
db <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(db, "show databases;")
dbDisconnect(db)
result
count(result)
head(result)
source('http://bioconductor.org/biocLite.R')
biocLite("rhdf5")
library('sqldf')
acs <- read.table("getdata_data_ss06pid.csv", sep=",", header=T)
setwd("~/DataScience/datasciencecoursera/3_getdata/q2")
library('sqldf')
acs <- read.table("getdata_data_ss06pid.csv", sep=",", header=T)
sqldf("select pwgtp1 from acs")
head(sqldf("select pwgtp1 from acs"))
head(acs)
names(acs)
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
a <- sqldf("select distinct AGEP from acs")
a
a$AGEP
unique(acs$AGEP) = a$AGEP
b <- unique(acs$AGEP)
b = a$AGEP
b == a$AGEP
all(b == a$AGEP)
a <- sqldf("select distinct AGEP from acs")
con = url("http://biostat.jhsph.edu/~jleek/contact.html ")
htmlCode = readlines(con)
htmlCode = readLines(con)
close(con)
htmlCode
htmlCode[c(10,20,30,100)]
v <- htmlCode[c(10,20,30,100)]
v
nchar(v)
read.fwf
read.fwf()
read.fwf("data.for", skip=4, width(12, 7,4, 9,4, 9,4, 9,4))
read.fwf("data.for", skip=4, width=c(12, 7,4, 9,4, 9,4, 9,4))
DF <- read.fwf("data.for", skip=4, width=c(12, 7,4, 9,4, 9,4, 9,4))
DF
head(DF)
sum()
sum(DF$V4)
sum(DF$V4) + sum(DF$V9)
nchar(v)
sqldf("select distinct AGEP from acs")
nchar(v)
setwd("~/DataScience/datasciencecoursera/3_getdata/projreview")
prepareData <- function() {
filename = "household_power_consumption.txt"
if (!file.exists(filename)) {
stop("No data file. Download and unzip 'household_power_consumption.txt' into the working directory.")
}
## Read the data from file
data <- read.csv(filename, sep = ";", na.strings = "?", stringsAsFactors = FALSE)
## Convert Date column from character format
data$Date <- as.Date(data$Date , "%d/%m/%Y")
## Subset to the dates to be plotted
data <- data[(data$Date == "2007-02-01" | data$Date == "2007-02-02"),]
## Convert Time column to include Date AND Time as POSIXlt type
data$Time <- as.POSIXlt(paste(data$Date, data$Time))
return(data)
}
generatePlot1 <- function() {
data <- prepareData()
## Plot the histogram using the PNG device
png("plot1.png")
hist(data$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", col = "red")
dev.off()
invisible()
}
generatePlot1()
## Generates a Line Graph for Global Active Power for 2007-02-01 and 2007-02-02
generatePlot2 <- function() {
data <- prepareData()
## Plot the graph using the PNG device
png("plot2.png")
plot(data$Time, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
dev.off()
invisible()
}
generatePlot2()
## Generates a Line Graph for Global Active Power for 2007-02-01 and 2007-02-02
generatePlot2 <- function() {
data <- prepareData()
## Plot the graph using the PNG device
png("plot2.png")
plot(data$Time, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
dev.off()
}
generatePlot2()
## Generates a Line Graph for 3 Sub_metering energy values on 2007-02-01 and 2007-02-02
generatePlot3 <- function() {
data <- prepareData()
## Plot the graph using the PNG device
png("plot3.png")
with(data,
plot(Time, Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering", col = "black"))
points(data$Time, data$Sub_metering_2, type = "l", xlab = "", ylab = "", col = "red")
points(data$Time, data$Sub_metering_3, type = "l", xlab = "", ylab = "", col = "blue")
legend("topright", lwd=1, col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
invisible()
}
generatePlot3()
generatePlot4 <- function() {
data <- prepareData()
## use the PNG device
png("plot4.png")
## set 2 rows and 2 cols for the graphs
par(mfcol = c(2, 2))
## top left plot: Global Active Power
plot(data$Time, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
# bottom left plot: Energy sub metering
with(data, plot(Time, Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering", col = "black"))
points(data$Time, data$Sub_metering_2, type = "l", xlab = "", ylab = "", col = "red")
points(data$Time, data$Sub_metering_3, type = "l", xlab = "", ylab = "", col = "blue")
legend("topright", lwd = 1, bty = "n", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## top right plot: Voltage
plot(data$Time, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
## bottom right plot: Global_reactive_power
with(data, plot(Time, Global_reactive_power, type = "l", xlab = "datetime"))
dev.off()
invisible()
}
generatePlot4()
library(sqldf)
## Selects the file via the read.csv.sql function, only the rows between
## 1/2/2007 and 2/2/2007 are selected
data <- read.csv.sql("household_power_consumption.txt", sql = "SELECT * from file WHERE
Date IN ('1/2/2007', '2/2/2007')", header = TRUE, sep = ";")
## convertes the characters in the Date column and to the class "POSIXlt" "POSIXt" essentially creating
## a complex time variable with d/m/y H/M/S
data$TD <- strptime(paste(data$Date, data$Time, sep = ","), format ="%d/%m/%Y,%H:%M:%S")
## creates the required plot 1 and prints it as a png file
png(file = "plot1.png")
hist(data$Global_active_power,
col = "red",
main = "Global Active Power",
ylab = "Frequency",
xlab = "Global Active Power (kilowatts)")
dev.off()
png(file = "plot2.png")
plot(data$TD, data$Global_active_power,
type = "l",
ylab = "Global Active Power (kilowatts)",
xlab = "")
dev.off()
png(file = "plot3.png")
with(data, {
plot(data$TD, data$Sub_metering_1 + data$Sub_metering_2 + data$Sub_metering_3,
type = "n",
xlab = "",
ylab = "Energy sub metering",
ylim = c(0,40))
points(data$TD, data$Sub_metering_1, col = "black", type = "l")
points(data$TD, data$Sub_metering_2, col = "red", type = "l")
points(data$TD, data$Sub_metering_3, col = "blue", type = "l")
legend("topright", lwd = "1", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
})
dev.off()
png(file = "plot4.png")
par(mfrow = c(2, 2), mar = c(4, 4, 4, 2), oma = c(2, 0, 0, 0))
with(data, {
plot(data$TD, data$Global_active_power,
type = "l",
ylab = "Global Active Power",
xlab = "")
plot(data$TD, data$Voltage,
type = "l",
ylab = "Voltage",
xlab = "datetime")
with(data, {
plot(data$TD, data$Sub_metering_1 + data$Sub_metering_2 + data$Sub_metering_3,
type = "n",
xlab = "",
ylab = "Energy sub metering",
ylim = c(1,40))
points(data$TD, data$Sub_metering_1, col = "black", type = "l")
points(data$TD, data$Sub_metering_2, col = "red", type = "l")
points(data$TD, data$Sub_metering_3, col = "blue", type = "l")
legend("topright", lwd = "1", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
bty = "n")
})
plot(data$TD, Global_reactive_power,
type = "l",
ylab = "Global_reactive_power",
xlab = "datetime")
})
dev.off()
# Read input data and combine date and time into a single column.
data = read.csv('household_power_consumption.txt', sep = ';',
stringsAsFactors = F, na.strings = '?')
data$DateTime = strptime(paste(data$Date, data$Time),
format = '%d/%m/%Y %H:%M:%S', tz = 'GMT')
# Filter for the two dates specified.
start = strptime('2007-02-01 00:00:00 ', format = '%Y-%m-%d %H:%M:%S', tz = 'GMT')
end = strptime('2007-02-02 23:59:59', format = '%Y-%m-%d %H:%M:%S', tz = 'GMT')
data = data[data$DateTime >= start & data$DateTime <= end, ]
# Save the plot as a 480x480 pixel PNG file.
png('plot1.png', 480, 480)
hist(data$Global_active_power, col = 'red', main = 'Global Active Power',
xlab = 'Global Active Power (kilowatts)', ylim = c(0,1200))
dev.off()
png(file = "plot4.png")
par(mfrow = c(2, 2), mar = c(4, 4, 4, 2), oma = c(2, 0, 0, 0))
with(data, {
plot(data$TD, data$Global_active_power,
type = "l",
ylab = "Global Active Power",
xlab = "")
plot(data$TD, data$Voltage,
type = "l",
ylab = "Voltage",
xlab = "datetime")
with(data, {
plot(data$TD, data$Sub_metering_1 + data$Sub_metering_2 + data$Sub_metering_3,
type = "n",
xlab = "",
ylab = "Energy sub metering",
ylim = c(1,40))
points(data$TD, data$Sub_metering_1, col = "black", type = "l")
points(data$TD, data$Sub_metering_2, col = "red", type = "l")
points(data$TD, data$Sub_metering_3, col = "blue", type = "l")
legend("topright", lwd = "1", col = c("black", "red", "blue"),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
bty = "n")
})
plot(data$TD, Global_reactive_power,
type = "l",
ylab = "Global_reactive_power",
xlab = "datetime")
})
dev.off()
# Save the plot as a 480x480 pixel PNG file.
png('plot2.png', 480, 480)
plot(data$DateTime, data$Global_active_power, type='l',
xlab = '', ylab = 'Global Active Power (kilowatts)')
dev.off()
# Save the plot as a 480x480 pixel PNG file.
png('plot3.png', 480, 480)
plot(data$DateTime, data$Sub_metering_1, type='l',
xlab = '', ylab = 'Energy sub metering')
lines(x = data$DateTime, y = data$Sub_metering_2, col = 'red')
lines(x = data$DateTime, y = data$Sub_metering_3, col = 'blue')
legend('topright', col = c('black', 'red', 'blue'),
legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), lty = 1)
dev.off()
# Save the plot as a 480x480 pixel PNG file.
png('plot4.png', 480, 480)
par(mfrow = c(2,2))
plot(data$DateTime, data$Global_active_power, type='l',
xlab = '', ylab = 'Global Active Power')
plot(data$DateTime, data$Voltage, type='l',
xlab = 'datetime', ylab = 'Voltage')
plot(data$DateTime, data$Sub_metering_1, type='l',
xlab = '', ylab = 'Energy sub metering')
lines(x = data$DateTime, y = data$Sub_metering_2, col = 'red')
lines(x = data$DateTime, y = data$Sub_metering_3, col = 'blue')
legend('topright', col = c('black', 'red', 'blue'), bty = 'n',
legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), lty = 1)
plot(data$DateTime, data$Global_reactive_power, type='l',
xlab = 'datetime', ylab = 'Global_reactive_power')
dev.off()
install.packages(ggplot2)
install.packages("ggplot2")
str(data)
summary(data)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(nlme)
str(BodyWeight)
?lattice
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library("ggplot2")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g + geom_point()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
