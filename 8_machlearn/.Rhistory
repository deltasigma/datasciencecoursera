dat <- data.frame(
x = c(exp1000,mex),
size = factor(rep(c('exp','avgexp'), rep(1000, 2)))
)
nosim <- 1000
lambda <- 0.2
exp1000 <- rexp(nosim,lambda)
# Run 1000 simulation of average of 40 exponentials
mex = NULL
for (i in 1:nosim) mex = c(mex,mean(rexp(40,lambda)))
dat <- data.frame(
x = c(exp1000,mex),
size = factor(rep(c('exp','avgexp'), rep(nosim, 2)))
)
View(dat)
g <- ggplot(dat, aes(x = x, fill = type)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
library(ggplot)
library(ggplot2)
g <- ggplot(dat, aes(x = x, fill = type)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
dat <- data.frame(
x = c(exp1000,mex),
t = factor(rep(c('exp','avgexp'), rep(nosim, 2)))
)
top(dat)
cat(dat)
tail(dat)
g <- ggplot(dat, aes(x = x, fill = t)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
g <- ggplot(dat, aes(x = x, fill = t)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
g
g <- g + stat_function(fun = dnorm, size = 2)
g
g + facet_grid(. ~ size)
g
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ t)
g <- ggplot(dat, aes(x = x, fill = t)) + geom_histogram(binwidth=.3, colour = "black")
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ t)
ls
n <- 9
n <- 9
sd <- 30
Xbar <- 110
Xbar <- 1100
Xbar + c(-1,1) * qt(.975,n-1) * sd / sqrt(n)
Xbar <- -2
del(sd)
rm(sd)
sd <- (-Xbar*sqrt(n))/qt(.975,n-1)
sd
n <- 10
MWTn <- 3
MWTo <- 5
VARn <- 0.6
VARo <- 0.68
Sp <- (VARn+VARo)/2
(3-5) + c(-1,1) * qt(.975,18) * Sp * (1/10) ^0.5
Sp <- (VARn+VARo)/2
(5-3) + c(-1,1) * qt(.975,18) * Sp * (1/10) ^0.5
(5-3) + c(-1,1) * qt(.975,18) * Sp * (1/5) ^0.5
(5-3) + c(-1,1) * qt(.975,18) * Sp * (2/10) ^0.5
Sp <- (VARn+VARo)/2
(3-5) + c(-1,1) * qt(.975,18) * Sp * (2/10) ^0.5
(5-3) + c(-1,1) * qt(.975,18) * Sp * (2/10) ^0.5
Sp <- sqrt((VARn+VARo)/2)
(5-3) + c(-1,1) * qt(.975,18) * Sp * (2/10) ^0.5
(3-5) + c(-1,1) * qt(.975,18) * Sp * (2/10) ^0.5
H0 <- 6
SD0 <- 2
rm(SD0)
Sd0 <- 2
C <- H0 - Sd0 * 1.645
1.645 * Sd0
C <- H0 - Sd0 * qt(0.975,99)
C
qt(0.975,99)
Sp <- sqrt((-3+1)/2)
Sp <- sqrt((1-3)/2)
sqrt(2/2)
sp <-1
Sp <- 1
rm(sp)
rm(Sd0,H0,C)
(-3-1) + c(-1,1) * qt(.9,18) * Sp * (2/9) ^0.5
Sp <- (1.5Ë†2+1.8Ë†2)/2
Sp <- (1.5^2+1.8^2)/2
Sp
(-3-1) + c(-1,1) * qt(.9,18) * Sp * (2/9) ^0.5
Sp <- sqrt((1.5^2+1.8^2)/2)
(-3-1) + c(-1,1) * qt(.9,18) * Sp * (2/9) ^0.5
(-3-1) + c(-1,1) * qt(.9,16) * Sp * (2/9) ^0.5
(-3-1) + c(-1,1) * qt(.9,16) * Sp * (2/9) ^0.5
(-3-1) + c(-1,1) * qt(.9,17) * Sp * (2/9) ^0.5
Sp <- sqrt(((1.5^2)+(1.8^2))/2)
(-3-1) + c(-1,1) * qt(.9,17) * Sp * (2/9) ^0.5
Sp <- sqrt((8*(1.5^2)+8*(1.8^2))/(16)
;
Sp <- sqrt((8*(1.5^2)+8*(1.8^2))/(16))
(-3-1) + c(-1,1) * qt(.9,17) * Sp * (2/9) ^0.5
(-3-1) + c(-1,1) * qt(.975,17) * Sp * (2/9) ^0.5
(-3-1) + c(-1,1) * qt(.975,16) * Sp * (2/9) ^0.5
(-3-1) + c(-1,1) * qt(.9,16) * Sp * (2/9) ^0.5
(-3-1) + c(-1,1) * qt(.9,16) * Sp * (2/9) ^ 0.5
(-1-3) + c(-1,1) * qt(.9,16) * Sp * (2/9) ^ 0.5
(-3-1) + c(-1,1) * qt(.9,16) * Sp * (2/9) ^ 0.5
library(manipulate)
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,df=2)
myplot2(20)
sleep
range(g1)
range(g2)
difference = g2 - g1
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1,1) * qt(.975, df=9) / (s/sqrt(10))
mn + c(-1,1) * qt(.975, df=9) * s /sqrt(10))
mn + c(-1,1) * qt(.975, df=9) * s /sqrt(10)
t.test(g2-g1)$conf.int
t.test(difference)$conf.int
sp <- 7*(15.34)^2+21*(18.23)^2
sp <- 7*(15.34)^2+20*(18.23)^2
ns <- 7+20
sp <- sqrt(sp/ns)
(132.86-127.44) * c(-1,1) * qt(.975,ns) * sp * sqrt(1/8+1/21)
(132.86-127.44) + c(-1,1) * qt(.975,ns) * sp * sqrt(1/8+1/21)
132.86-127.44 + c(-1,1) * qt(.975,ns) * sp * sqrt(1/8+1/21)
sp <- sqrt((var(g1)*9+var(g2)*9)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1) * qt(.975,18) * sp * sqrt(2/10)
md + c(-1,1) * qt(.975,18) * sp * sqrt(1/5)
t.test(g2, g1, paired=FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired=TRUE)$conf
num <- ((15.34^2)/8+(18.23^2)/21)^2
den < (15.34^4)/8^2/7 + (18.23^4)/21^2/20
den <- (15.34^4)/8^2/7 + (18.23^4)/21^2/20
mydf <- num/den
132.86-127.44+c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/7+18.23^2/20)
132.86-127.44+c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8+18.23^2/21)
10/sqrt(100)
(32-30)/1
(32-30)/1
(32-30)/(10/4)
15
qt(.95,df=15)
dim(fs)
t.test(fs$fheight,fs$sheightm,paired=TRUE)
t.test(fs$fheight,y=fs$sheightm,paired=TRUE)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
0.14453125
mybin[7]
c(mybin[7] ,mybin[8])
mybin[7] and mybin[8]
.144
.035
7
8
cbind(c(1,2,3,4,5),c(140,138,150,148,135),c(132,135,151,146,130))
sbp <- cbind(c(1,2,3,4,5),c(140,138,150,148,135),c(132,135,151,146,130))
srt(sbp)
str(sbp)
rm sbp
rm(sbp)
sbp <- data.frame(subject = c(1,2,3,4,5), baseline = c(140,138,150,148,135), week2 = c(132,135,151,146,130))
str(sbp)
sbp
t.test(sbp$week2-sbp$baseline)
t.test(sbp$baseline-sbp$baseline)
t.test(sbp$baseline-sbp$week2)
t.test(sbp$baseline-sbp$week2)
1100 + qt(.975,df=8)
1100 + qt(.975,df=8) * 30/sqrt(8)
1100 + c(-1,1) * qt(.975,df=8) * 30/sqrt(8)
1100 + c(-1,1) * qt(.975,df=8) * 30/sqrt(9)
?t.test
swirl
swirl()
pt(q=2.5, df=15, lower.tail=F)
pt(q=2.5, df=15, lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6,size=9, prob=.5, lower.tail=FALSE)
pbinom(6,size=8, prob=.5, lower.tail=FALSE)
pbinom(7,size=8, prob=.5, lower.tail=TRUE)
ppois(9, lambda=5, lower.tail = TRUE)
ppois(9, 5, lower.tail = TRUE)
ppois(9, 5, lower.tail = FALSE)
ppois(10/1787*100, 1, lower.tail = FALSE)
ppois(1, 1, lower.tail = FALSE)
ppois(10/1787, 1, lower.tail = FALSE)
ppois(10/1787, 0.1, lower.tail = FALSE)
ppois(10/1787*100, 1, lower.tail = FALSE)
tx = 10/1787
tx
tx <- tx * 100
tx
ppois(tx,1,lower.tail = FALSE)
ppois(tx,0.1,lower.tail = FALSE)
pairs(mtcars, panel = panel.smooth, main = "Cars Performance")
pairs(mtcars, panel = panel.smooth, main = "Cars Performance", col = 3)
require("graphics")
pairs(mtcars, panel = panel.smooth, main = "Cars Performance", col = 3)
require("stats")
pairs(mtcars, panel = panel.smooth, main = "Cars Performance", col = 3)
par("mar")
par(mar=c(1,1,1,1))
pairs(mtcars, panel = panel.smooth, main = "Cars Performance", col = 3)
pairs(mtcars, panel = panel.smooth, main = "Cars Performance", col = 5)
pairs(mtcars, panel = panel.smooth, main = "Cars Performance")
par(mar=c(0,0,0,0))
pairs(mtcars, panel = panel.smooth, main = "Cars Performance")
pairs(mtcars, panel = panel.smooth, main = "Cars Performance")
?mtcars
pairs(mtcars[,c("mpg","cyl","disp")], panel = panel.smooth, main = "Cars Performance")
model <- lm(mpg ~ . , mtcars)
summary(model)
?I
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
library(Hmisc)
data(concrete)
set.seed(975)
3/4
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
plot(training$CompressiveStrength)
View(training)
mixtures$index <- 1:length(mixtures$CompressiveStrength)
plot(training$CompressiveStrength)
testing$index <- 1:length(testing$CompressiveStrength)
plot(training$CompressiveStrength)
View(testing)
library(caret)
library(AppliedPredictiveModeling)
library(Hmisc)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
testing$index <- 1:length(testing$CompressiveStrength)
ggplot(training, aes(x=index, y=CompressiveStrength))
g <- ggplot(training, aes(x=index, y=CompressiveStrength))
g
g <- ggplot(training, aes(x=index, y=CompressiveStrength)) + geom_point(shape=1)
g
g <- ggplot(training, aes(x=training$index, y=training$CompressiveStrength))
g <- g + geom_point(shape=1)
g
g <- ggplot(training$CompressiveStrength, aes(x=training$index, y=training$CompressiveStrength))
g <- g + geom_point(shape=1)
g
g <- ggplot(training$CompressiveStrength, data = training, aes(x=training$index, y=training$CompressiveStrength))
g <- g + geom_point(shape=1)
g
g <- ggplot(training$CompressiveStrength)
g <- g + geom_point(shape=1)
g
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$index <- 1:length(training$CompressiveStrength)
# Plot
plot(training$CompressiveStrength)
g <- ggplot(training$CompressiveStrength, y=training$index)
g <- g + geom_point(shape=1)
g
g <- ggplot(training, aex(x=index,y=CompressiveStrength))
g <- g + geom_point(shape=1)
g
g <- ggplot(training, aes(x=index,y=CompressiveStrength))
g <- g + geom_point(shape=1)
g
training$Cement <- cut2(training$Cement, g=5)
g <- ggplot(training, aes(x=index, y=CompressiveStrength, color=Cement))
g <- g + geom_point(shape=1)
g
names(training)
ggsave(filename=paste("Cement",".jpg"),plot=g)
setwd("~/DataScience/datasciencecoursera/8_machlearn")
g <- ggplot(training, aes(x=index, y=CompressiveStrength, color=Cement))
g <- g + geom_point(shape=1)
ggsave(filename=paste("Cement",".jpg"),plot=g)
names(training[,-c(CompressiveStrength,index)])
names(training[,-c(9,10)])
for (v in names(training[,-c(9,10)])) {
training$v
}
for (v in names(training[,-c(9,10)])) {
head(training$v)
}
for (v in names(training[,-c(9,10)])) {
head(training[,v])
}
v <- names(training[,-c(9,10)])
v
training[v]
head(training[v])
for (v in names(training[,-c(9,10)])) {
head(training[v])
}
for (v in names(training[,-c(9,10)])) {
head(training[v])
}
for (v in names(training[,-c(9,10)])) {
print(v)
head(training[v])
}
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$index <- 1:length(training$CompressiveStrength)
# Plot
plot(training$CompressiveStrength)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$index <- 1:length(training$CompressiveStrength)
# Plot
plot(training$CompressiveStrength)
# Generate colored models
bins <- 4 # Number of bins generated by cut2
for (v in names(training[,-c(9,10)])) {
# Convert discret variables to factor
training[v] <- cut2(training[v], g=bins)
# Generate graph for this predictor
g <- ggplot(training, aes(x=index, y=CompressiveStrength, color=v))
g <- g + geom_point(shape=1)
ggsave(filename=paste(v,".jpg"),plot=g)
}
# Generate colored models
bins <- 4 # Number of bins generated by cut2
for (v in names(training[,-c(9,10)])) {
# Convert discret variables to factor
training[v] <- cut2(training[v], g=bins)
# Generate graph for this predictor
g <- ggplot(training, aes(x=index, y=CompressiveStrength, color=v))
g <- g + geom_point(shape=1)
ggsave(filename=paste(v,".jpg"),plot=g)
}
mtcars
str(mtcars)
model <- lm(mpg ~ am, mtcars)
plot(model)
plot(model)
par(mar=c(0,0,0,0))
pairs(mtcars, panel = panel.smooth, main = "Cars Performance")
pairs(mtcars[,c("mpg","cyl","disp")], panel = panel.smooth, main = "Cars Performance")
plot(mtcars$mpg ~ mtcars$am)
model <- lm(mpg ~ . , mtcars)
library("ggplot2")g
carParameter <- ggplot(mtcars, aes(x = am, y = mpg)) + geom_point(size=1)
carParameter <- carParameter + facet_grid(. ~ cyl)
par(mar=c(0,0,0,0))
pairs(mtcars, panel = panel.smooth, main = "Cars Performance")
pairs(mtcars[,c("mpg","cyl","disp")], panel = panel.smooth, main = "Cars Performance")
plot(mtcars$mpg ~ mtcars$am)
library("ggplot2")g
carParameter <- ggplot(mtcars, aes(x = am, y = mpg)) + geom_point(size=1)
carParameter <- carParameter + facet_grid(. ~ cyl)
?mtcars
str(mtcars)
mtcars$am <- as.factor(mtcars$am)
str(mtcars)
?as.factor
rm(mtcars)
mtcars
str(mtcars)
mtcars$am <- as.factor(mtcars$am, levels = c("automatic","manual"))
mtcars$am <- as.factor(mtcars$am, labels = c("automatic","manual"))
mtcars$am <- as.factor(mtcars$am, c(0,1), labels = c("automatic","manual"))
mtcars$am <- as.factor(mtcars$am)
mtcars[am == "0"]
mtcars[am == 0]
mtcars[am == 0,]
mtcars[mtcars$am == 0,]
mtcars[mtcars$am == 1,]
mtcars[mtcars$am == 1,]$am
?mtcars
mtcars[mtcars$am == 1,]$am <- as.factor("manual")
levels(mtcars$am)[levels(mtcars$am)=="0"] <- "automatic"
levels(mtcars$am)[levels(mtcars$am)=="1"] <- "manual"
mtcars
mtcars$am <- as.factor(mtcars$am)
mtcars
levels(mtcars$am)[levels(mtcars$am)=="1"] <- "manual"
mtcars
levels(mtcars$am)[levels(mtcars$am)!="1"] <- "automatic"
mtcars
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am)[levels(mtcars$am)=="1"] <- "manual"
levels(mtcars$am)[!levels(mtcars$am)=="1"] <- "automatic"
mtcars$am <- as.factor(mtcars$am)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am)[levels(mtcars$am)=="1"] <- "manual"
levels(mtcars$am)[!levels(mtcars$am)=="1"] <- "automatic"
mtcars
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am)[levels(mtcars$am)=="1"] <- "manual"
levels(mtcars$am)[levels(mtcars$am)=="0"] <- "automatic"
mtcars
library(ggplot2)
str(mtcars)
p <- qplot(am,mpg,color=cyl,data=mtcars)
p
carParameter <- ggplot(mtcars, aes(x = am, y = mpg)) + geom_point(size=1)
carParameter <- carParameter + facet_grid(. ~ cyl)
carParameter
carParameter <- ggplot(mtcars, aes(x = am, y = mpg, color=wt)) + geom_point(size=1)
carParameter <- carParameter + facet_grid(. ~ cyl)
carParameter
install.packages("corrplot")
library(corrplot)
# build the matrix
mcor<-cor(mtcars)
# Print mcor and round to 2 digits
round(mcor,digits=2)
# plot it
corrplot(mcor)
# build the matrix
mcor<-cor(mtcars)
library(corrplot)
# build the matrix
mcor<-cor(mtcars)
# Print mcor and round to 2 digits
round(mcor,digits=2)
# plot it
corrplot(mcor)
require(graphics)
pairs(mtcars, main = "mtcars data")
# plot it
corrplot(mcor)
corrplot(mcor,addCoef.col="black", method="shade", shade.col=NA)
corrplot(mcor, method="shade", shade.col=NA)
p <- qplot(am,mpg,color=cyl,data=mtcars)
p
cor(mtcars)
cor(mtcars)
table(cor(mtcars))
cor(mtcars)
model <- lm(mpg ~ ., data=mtcars)
model <- lm(mpg ~ ., data=mtcars)
summary(model)
modelFull <- lm(mpg ~ ., data=mtcars)
modelAm <- lm(mpg ~ am., data=mtcars)
modelFull <- lm(mpg ~ ., data=mtcars)
modelAm <- lm(mpg ~ am, data=mtcars)
summary(modelAm)
modelAm
modelFull
modelFull$df.residual
modelFull$residuals
library(corrplot)
# build the matrix
mcor<-cor(mtcars)
# Print mcor and round to 2 digits
round(mcor,digits=2)
# plot it
corrplot(mcor)
corrplot(mcor, method="shade", shade.col=NA)
corrplot(mcor,addCoef.col="black", method="shade", shade.col=NA)
require(graphics)
pairs(mtcars, main = "mtcars data")
# plot it
corrplot(mcor)
corrplot(mcor, method="shade", shade.col=NA)
corrplot(mcor,addCoef.col="black", method="shade", shade.col=NA)
corrplot(mcor)
corrplot(mcor, method="shade", shade.col=NA)
carParameter <- ggplot(mtcars, aes(x = am, y = mpg, color=wt))
carParameter <- carParameter + geom_point(size=1)
carParameter <- carParameter + facet_grid(. ~ cyl)
carParameter
library("ggplot2")
carParameter <- ggplot(mtcars, aes(x = am, y = mpg, color=wt))
carParameter <- carParameter + geom_point(size=1)
carParameter <- carParameter + facet_grid(. ~ cyl)
carParameter
library(corrplot)
# build the matrix
mcor<-cor(mtcars)
# Print mcor and round to 2 digits
round(mcor,digits=2)
corrplot(mcor)
corrplot(mcor, method="shade", shade.col=NA)
require(graphics)
pairs(mtcars, main = "mtcars data")
